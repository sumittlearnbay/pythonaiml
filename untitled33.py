# -*- coding: utf-8 -*-
"""Untitled33.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pHNXfbddgiZqwMuW8zjzPlU5g6hxQaW6
"""

from diagrams import Diagram
from diagrams.custom import Custom

def generate_erd():
    with Diagram("Employee ERD", show=False, filename="erd_diagram"):
        emp = Custom("Employee", "./employee_icon.png")
        id_field = Custom("id", "./id_icon.png")
        name_field = Custom("name", "./name_icon.png")

        emp >> id_field
        emp >> name_field

generate_erd()

from transformers import pipeline
from diagrams import Diagram
from diagrams.custom import Custom

# Initialize text generation pipeline
text_generator = pipeline("text-generation", model="EleutherAI/gpt-neo-1.3B", framework="pt")

def generate_java_pojo(class_name, fields):
    """Generates a Java POJO class using a transformer model."""
    prompt = (
        f"Generate a complete Java POJO class named {class_name} with the following fields: {fields}. "
        "Include a parameterized constructor, a default constructor, getters, setters, and a toString() method."
    )
    result = text_generator(prompt, max_length=300, truncation=True)
    return result[0]['generated_text']

def generate_erd(class_name, fields):
    """Generates an ERD diagram using the diagrams library."""
    with Diagram(f"{class_name} ERD", show=False, filename=f"{class_name.lower()}_erd"):
        entity = Custom(class_name, "./entity_icon.png")  # Change icon as needed
        field_nodes = [Custom(field.split()[1], "./field_icon.png") for field in fields.split(",") if len(field.split()) == 2]

        for field_node in field_nodes:
            entity >> field_node

def main():
    num_classes = int(input("Enter the number of classes to generate: "))

    for i in range(num_classes):
        class_name = input(f"\nEnter name for Class {i+1}: ").strip()
        fields = input(f"Enter fields for {class_name} (e.g., 'int id, String name'): ").strip()

        if class_name and fields:
            # Generate Java Class
            java_code = generate_java_pojo(class_name, fields)
            print(f"\nGenerated Java POJO Class for {class_name}:\n")
            print(java_code)

            # Generate ERD Diagram
            generate_erd(class_name, fields)
            print(f"ERD Diagram saved as '{class_name.lower()}_erd.png'")
        else:
            print("\nError: Class name and fields cannot be empty!")

if __name__ == "__main__":
    main()

from transformers import pipeline
from diagrams import Diagram
from diagrams.custom import Custom

text_generator = pipeline("text-generation", model="EleutherAI/gpt-neo-1.3B", framework="pt")

class_definitions = [
    {"name": "Employee", "fields": "int id, String name, String department, double salary"},
    {"name": "Department", "fields": "int deptId, String deptName"},
    {"name": "Project", "fields": "int projectId, String projectName, double budget"}
]

def generate_java_pojo(class_name, fields):
    """Generates a Java POJO class using a transformer model."""
    prompt = (
        f"Generate a complete Java POJO class named {class_name} with the following fields: {fields}. "
        "Include a parameterized constructor, a default constructor, getters, setters, and a toString() method."
    )
    result = text_generator(prompt, max_length=300, truncation=True)
    return result[0]['generated_text']

def generate_erd(class_name, fields):
    """Generates an ERD diagram using the diagrams library."""
    with Diagram(f"{class_name} ERD", show=False, filename=f"{class_name.lower()}_erd"):
        entity = Custom(class_name, "./entity_icon.png")  # Change icon as needed
        field_nodes = [Custom(field.split()[1], "./field_icon.png") for field in fields.split(",") if len(field.split()) == 2]

        for field_node in field_nodes:
            entity >> field_node

def main():
    for class_def in class_definitions:
        class_name = class_def["name"]
        fields = class_def["fields"]

        # Generate Java Class
        java_code = generate_java_pojo(class_name, fields)
        print(f"\nGenerated Java POJO Class for {class_name}:\n")
        print(java_code)

        # Generate ERD Diagram
        generate_erd(class_name, fields)
        print(f"ERD Diagram saved as '{class_name.lower()}_erd.png'")

if __name__ == "__main__":
    main()

pip install diagrams